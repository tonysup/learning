有界缓冲区和锁

通过一个有界缓冲区的 发送和接收的例子，讨论并发编程的难点
提出几种假设：
(1)只有一个发送和一个接收
(2)自旋的处理
(3)int 和 out 的变量足够大
(4)假定对于变量在共享内存的读写一致性
(5)共享变量的长度，LOAD和STORE时是一条操作。有些系统对于长整数会做多次处理
(6)编译器和处理器没有对语句做重排序


对于共享变量，通过锁的方式避免不一致性。
锁的硬件支持，支持RSM操作，即Test and set

拓展阅读引出，非阻塞的加锁方式，以及读副本更新(这个在linux系统中使用比较广泛)。
