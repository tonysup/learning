线程相关

为了解决共享处理器的问题，引入线程的概念。
首先设计一个简单的线程管理器，然后在实现这个设计的过程中，遇到问题再不断解决。

(1)提供一个线程创建的方法 thread_id <---ALLOCATE_THREAD(starting_procedure,address_space_id)
   再重新实现多线程的生产者和消费者的过程中，引入YIELD方法。

提出中断和异常的区别(联想到哪些系统调用是可被中断的，中断后如何处理(需要翻看下UNIX环境高级编程的部分内容))
本书中对中断和异常区分的相对比较粗，只是说中断在处理器层面处理，异常在线程层面处理。

(2)YIELD方法的实现
该方法可以简单理解成三个步骤:
<1> 保存线程的状态，用来恢复时使用。
<2> 调度另外一个线程到这个处理器上运行。
<3> 分配处理器到另外的线程。

(3)提供建立和终结线程的方法
另外提供处理器的线程，处理调度用户线程

(4)提出一种抢先式调度的方法

(5)顺序合作的线程源于WAIT和NOTIFY
提供了一种更高级的方式比如AWAIT ADVANCE TICKET 和 READ方式
